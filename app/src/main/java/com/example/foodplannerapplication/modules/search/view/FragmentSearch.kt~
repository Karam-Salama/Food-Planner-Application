package com.example.foodplannerapplication.modules.search.view
import android.content.IntentFilter
import android.net.ConnectivityManager
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.airbnb.lottie.LottieAnimationView
import com.example.foodplannerapplication.R
import com.example.foodplannerapplication.core.model.cache.room.database.FavoritesDatabase
import com.example.foodplannerapplication.core.utils.classes.NetworkReceiver
import com.example.foodplannerapplication.core.viewmodel.AddToFavoriteViewModel
import com.example.foodplannerapplication.core.viewmodel.DashboardViewModel
import com.example.foodplannerapplication.core.viewmodel.FilterType
import com.example.foodplannerapplication.core.viewmodel.MyFactory
import com.example.foodplannerapplication.modules.home.model.server.services.RetrofitHelper
import com.example.foodplannerapplication.modules.search.view.adapters.SearchAdapter
import com.google.android.material.chip.Chip
import com.google.android.material.textfield.TextInputEditText

class FragmentSearch : Fragment(), ICommonSearchFilteredListener {
    private lateinit var viewModel: DashboardViewModel
    private lateinit var addToFavoriteViewModel: AddToFavoriteViewModel
    private lateinit var searchAdapter: SearchAdapter

    private lateinit var networkReceiver: NetworkReceiver
    private lateinit var noInternetAnimation: LottieAnimationView
    private lateinit var noInternetText: TextView
    private lateinit var mainContentLayout: View

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        return inflater.inflate(R.layout.fragment_search, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        initViews(view)
        setUpViewModel()
        setUpRecyclerView(view)
        setupChips(view)
        setupSearch(view)
        setUpFavoriteViewModel()
        observeViewModel()
    }

    private fun setUpViewModel() {
        viewModel = ViewModelProvider(this).get(DashboardViewModel::class.java)
    }

    private fun setUpRecyclerView(view: View) {
        val recyclerView = view.findViewById<RecyclerView>(R.id.recyclerView).apply {
            layoutManager = GridLayoutManager(requireContext(), 2)
            adapter = SearchAdapter(requireContext(), this@FragmentSearch)
            searchAdapter = adapter as SearchAdapter
        }
    }

    private fun initViews(view: View) {
        noInternetAnimation = view.findViewById(R.id.noInternetAnimation)
        noInternetText = view.findViewById(R.id.noInternetText)
        mainContentLayout = view.findViewById(R.id.main_content_canstraint_layout)

    }

    override fun onResume() {
        super.onResume()
        networkReceiver = NetworkReceiver { isConnected ->
            handleInternetChange(isConnected)
        }
        val intentFilter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)
        requireContext().registerReceiver(networkReceiver, intentFilter)
    }

    override fun onPause() {
        super.onPause()
        requireContext().unregisterReceiver(networkReceiver)
    }

    private fun handleInternetChange(isConnected: Boolean) {
        if (isConnected) {
            noInternetAnimation.visibility = View.GONE
            noInternetText.visibility = View.GONE
            mainContentLayout.visibility = View.VISIBLE
        } else {
            noInternetAnimation.visibility = View.VISIBLE
            noInternetText.visibility = View.VISIBLE
            mainContentLayout.visibility = View.GONE
        }
    }

    private fun setupChips(view: View) {
        view.findViewById<Chip>(R.id.chipCategories).setOnClickListener { viewModel.setFilterType(FilterType.CATEGORIES) }
        view.findViewById<Chip>(R.id.chipCountries).setOnClickListener { viewModel.setFilterType(FilterType.COUNTRIES) }
        view.findViewById<Chip>(R.id.chipIngredients).setOnClickListener { viewModel.setFilterType(FilterType.INGREDIENTS) }
    }

    private fun setupSearch(view: View) {
        view.findViewById<TextInputEditText>(R.id.et_meals_search).addTextChangedListener(object : TextWatcher {
            override fun afterTextChanged(s: Editable?) { viewModel.setSearchQuery(s.toString()) }
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
        })
    }

    private fun observeViewModel() {
        viewModel.filteredData.observe(viewLifecycleOwner) { searchAdapter.updateList(it) }
    }

    private fun setUpFavoriteViewModel() {
        var dao = FavoritesDatabase.getDatabase(requireContext()).getFavoritesDao()
        var myFactory = MyFactory(dao, RetrofitHelper)
        addToFavoriteViewModel = ViewModelProvider(this, myFactory).get(AddToFavoriteViewModel::class.java)
    }

    override fun openMealsActivityByCategory(category: String?) {
        val actionFragmentSearchToFilteredMealsByCategoryFragment =
            FragmentSearchDirections.actionFragmentSearchToFilteredMealsByCategoryFragment(category)
        findNavController().navigate(actionFragmentSearchToFilteredMealsByCategoryFragment)
    }

    override fun openMealsActivityByArea(area: String?) {
        val actionFragmentSearchToFilteredMealsByAreaFragment =
            FragmentSearchDirections.actionFragmentSearchToFilteredMealsByAreaFragment()
        findNavController().navigate(actionFragmentSearchToFilteredMealsByAreaFragment)
    }

    override fun onFilteredMealsClick(mealId: String?) {}
}
